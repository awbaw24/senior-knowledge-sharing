# 🐳 Senior Knowledge Sharing Platform
# Docker Compose 설정 - 개발, 스테이징, 프로덕션 환경

version: '3.8'

# 🌐 공통 네트워크 설정
networks:
  knowledge-sharing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 💾 공통 볼륨 설정
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# 🔧 서비스 정의
services:
  # =============================================
  # 🌐 Frontend - 정적 웹사이트
  # =============================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: knowledge-sharing-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - knowledge-sharing-network
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    volumes:
      - nginx_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=web"

  # =============================================
  # 🛠️ Development Server (개발용)
  # =============================================
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: knowledge-sharing-dev
    ports:
      - "${DEV_PORT:-8080}:8080"
    networks:
      - knowledge-sharing-network
    volumes:
      - ./website:/app/website:ro
      - ./knowledge-base:/app/knowledge-base:ro
      - ./templates:/app/templates:ro
    environment:
      - NODE_ENV=development
    profiles:
      - dev
    command: ["live-server", "website", "--port=8080", "--host=0.0.0.0", "--no-browser", "--watch=website"]

  # =============================================
  # 🗄️ Database - PostgreSQL
  # =============================================
  database:
    image: postgres:15-alpine
    container_name: knowledge-sharing-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-knowledge_sharing}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - knowledge-sharing-network
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-knowledge_sharing}"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - backend
      - full

  # =============================================
  # ⚡ Cache - Redis
  # =============================================
  cache:
    image: redis:7-alpine
    container_name: knowledge-sharing-cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - knowledge-sharing-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - backend
      - full

  # =============================================
  # 🔄 Reverse Proxy - Traefik (선택적)
  # =============================================
  traefik:
    image: traefik:v3.0
    container_name: knowledge-sharing-proxy
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik 대시보드
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    networks:
      - knowledge-sharing-network
    profiles:
      - proxy
      - production

  # =============================================
  # 📊 Monitoring - Prometheus (선택적)
  # =============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: knowledge-sharing-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - knowledge-sharing-network
    profiles:
      - monitoring

  # =============================================
  # 📈 Metrics Dashboard - Grafana (선택적)
  # =============================================
  grafana:
    image: grafana/grafana:latest
    container_name: knowledge-sharing-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    networks:
      - knowledge-sharing-network
    profiles:
      - monitoring

# =============================================
# 🏃‍♂️ 실행 예시 명령어들
# =============================================
# 
# 📋 기본 프로덕션 실행:
#   docker-compose up -d frontend
#
# 🛠️ 개발 환경 실행:
#   docker-compose --profile dev up -d frontend-dev
#
# 🗄️ 백엔드 포함 전체 실행:
#   docker-compose --profile full up -d
#
# 📊 모니터링 포함 실행:
#   docker-compose --profile monitoring up -d
#
# 🔧 개별 서비스 재시작:
#   docker-compose restart frontend
#
# 📝 로그 확인:
#   docker-compose logs -f frontend
#
# 🧹 전체 정리:
#   docker-compose down -v --remove-orphans
#
# =============================================
